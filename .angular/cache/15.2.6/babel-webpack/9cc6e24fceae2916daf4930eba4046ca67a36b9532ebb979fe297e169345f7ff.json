{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, of, tap } from 'rxjs';\nimport { POKEMONS } from './mock-pokemon-list';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PokemonService {\n  constructor(http) {\n    this.http = http;\n  }\n  getPokemonList() {\n    return POKEMONS;\n  }\n  getPokemonById(pokemonId) {\n    return POKEMONS.find(pokemon => pokemon.id == pokemonId);\n  }\n  searchPokemonList(term) {\n    if (term.length <= 1) {\n      return of([]);\n    }\n    return this.http.get(`api/pokemons/?name=${term}`).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, [])));\n  }\n  updatePokemon(pokemon) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.put('api/pokemons', pokemon, httpOptions).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, null)));\n  }\n  addPokemon(pokemon) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post('api/pokemons', pokemon, httpOptions).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, null)));\n  }\n  deletePokemonById(pokemonId) {\n    return this.http.delete(`api/pokemons/${pokemonId}`).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, null)));\n  }\n  log(response) {\n    console.table(response);\n  }\n  handleError(error, errorValue) {\n    console.error(error);\n    return of(errorValue);\n  }\n  getPokemonTypeList() {\n    return ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n  }\n}\nPokemonService.ɵfac = function PokemonService_Factory(t) {\n  return new (t || PokemonService)(i0.ɵɵinject(i1.HttpClient));\n};\nPokemonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PokemonService,\n  factory: PokemonService.ɵfac\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","catchError","of","tap","POKEMONS","PokemonService","constructor","http","getPokemonList","getPokemonById","pokemonId","find","pokemon","id","searchPokemonList","term","length","get","pipe","response","log","error","handleError","updatePokemon","httpOptions","headers","put","addPokemon","post","deletePokemonById","delete","console","table","errorValue","getPokemonTypeList","factory"],"sourceRoot":"","sources":["C:\\Users\\pierr\\ng-pokemon-app\\src\\app\\pokemon\\pokemon.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, of, tap } from 'rxjs';\nimport { Pokemon } from './pokemon';\nimport { POKEMONS } from './mock-pokemon-list';\n\n@Injectable()\nexport class PokemonService {\n\n  constructor(private http: HttpClient) {}\n\n  getPokemonList(): Pokemon[] {\n    return POKEMONS;\n  }\n\n  getPokemonById(pokemonId: number): Pokemon|undefined {\n    return POKEMONS.find(pokemon => pokemon.id == pokemonId);\n  }\n\n  searchPokemonList(term: string): Observable<Pokemon[]> {\n    if(term.length <= 1) {\n      return of([]);\n    } \n\n    return this.http.get<Pokemon[]>(`api/pokemons/?name=${term}`).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, []))\n    );\n  }\n\n  updatePokemon(pokemon: Pokemon): Observable<null> {\n    const httpOptions = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n    };\n\n    return this.http.put('api/pokemons', pokemon, httpOptions).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, null))\n    );\n  }\n\n  addPokemon(pokemon: Pokemon): Observable<Pokemon> {\n    const httpOptions = {\n      headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n    };\n\n    return this.http.post<Pokemon>('api/pokemons', pokemon, httpOptions).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, null))\n    );\n  }\n\n  deletePokemonById(pokemonId: number): Observable<null> {\n    return this.http.delete(`api/pokemons/${pokemonId}`).pipe(\n      tap((response) => this.log(response)),\n      catchError((error) => this.handleError(error, null))\n    );\n  }\n\n  private log(response: any) {\n    console.table(response);\n  }\n\n  private handleError(error: Error, errorValue: any) {\n    console.error(error);\n    return of(errorValue);\n  }\n\n  getPokemonTypeList(): string[] {\n    return [\n      'Plante', \n      'Feu', \n      'Eau', \n      'Insecte',\n      'Normal',\n      'Electrik', \n      'Poison', \n      'Fée',\n      'Vol',\n      'Combat',\n      'Psy'\n    ];\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}